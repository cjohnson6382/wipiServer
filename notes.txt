MAKE A ROUTE FOR SERIAL_NUMBER


Now we just gotta get the startup script working so that it can take the email address


write it to /etc/jobbox/email
create /etc/jobbox/email if it does not exist when we start the thing

we need something to check that /etc/jobbox/email exists



Pi boots up for the first time, then is configured
	if they aren't configured after that, the configuration screen must show on the wifi connector homepage
	after the user connects to something, test for an internet connection
		if one exists, then hit the server with the email address

Connect to internet -> check for /etc/jobbox/email (which just contains an email address) -> send to registration page if it's not there. 

move the /etc/jobbox/email file to an app directory



have the script that starts wifi connector check for email file and write it if it doesn't exist

when the jumper shorted, delete the email file if it exists


https://raspberrypi.stackexchange.com/questions/2086/how-do-i-get-the-serial-number
what if we just pull the serial number and forget about the UUID



when the Pi starts.....
	doesn't matter if it's the first time or the 500th time
	it hits the server with its serial number and the email address to authenticate
	if the server responds with success, then the machine will assume that everything is working normally


but if we get the 'not registered' response, we can just send the email up to the registration endpoint




* this is how we get the email from the server:
	- Pi will have an 'email' route on it
	- when the user attempts the register, the frontend hits the Pi; the Pi is connected at this point
	- the Pi has EMAIL in its local config variables somewhere
	- when the user jumps the pins on the Pi to reset config, this will blank the email config file
	- next time they boot, the server will give them a 'not registered'









Raspberry Pi turns into an access point:

	https://gist.github.com/Lewiscowles1986/fecd4de0b45b2029c390

Manages the access point that's already existing on the Raspberry Pi:
	
	https://github.com/billz/raspap-webgui


Story:
	Raspberry Pi boots up as an access point that the user can connect to. 
	Once connected to, displays a list of available WiFi networks; 
		- user selects one, the Pi exits acceess point mode and connects to the chosen WiFi network

for all Rasp Pi's:
pw: pickles

SSH enabled on the current one: 192.168.1.108


instructions:
	* setup the DHCP server
	* setup hostapd.conf
		- make sure the daemon starter uses the right conf file
	* setup NAT (probably unneeded; this is for configuration, presumably)
	* possibly remove WPA supplicant
	* once connected to the AP, go to localhost:80 in a web browser and connect to external wifi
		- will either need to use the existing wifi connection and apply all configuration settings at the end
		- or will need to use the second wifi connection



* will have a script that runs @ boot; if there is a config for connecting to a network present, then don't start the access point code
	- otherwise, start as an access point with SSID and PW
	- the Pi will have port 8080 open, which will route to the config webserver




#	gotta do something so that the "IE" fields, which there are multiple of, do not glob over each other in the dict

from subprocess import run
from subprocess import PIPE

from werkzeug.datastructures import MultiDict

def dictify (l):
	t = [a.strip() for a in l]
	t1 = [a.split(":", 1) for a in t]
	t2 = MultiDict([a for a in t1 if len(a) > 1])
	return t2

def fix_ie (cell):
	print(cell)
	cell.setlist("IE", list(filter(lambda x: "Unknown" not in x, f[1].getlist("IE"))))
	return cell

def fix_essid (cell):
	print(cell)
	essid = cell.get("ESSID")
	print(essid)
	if essid: 
		essid = essid.strip('"')
		cell.setlist("ESSID", [essid])		
	return cell

def strip_elements (cell):
	c = [a.strip() for a in cell]
	return c	

a = run(args=["sudo", "/sbin/iwlist", "wlan1", "scanning"], stdout=PIPE)
b = a.stdout.decode()

c = b.split("Cell")
d = [a.split("\n") for a in c]

e = [strip_elements(a) for a in d]
f = [dictify(a) for a in e]
g = [fix_ie(a) for a in f]
h = [fix_essid(a) for a in g]


"""
MultiDict(
	[
		('Frequency', '2.437 GHz (Channel 6)'), 
		('Mode', 'Master'), 
		('Extra', 'tsf=0000000000000000'), 
		('Extra', ' Last beacon: 30ms ago'), 
		('Bit Rates', '1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 6 Mb/s'), 
		('Bit Rates', '24 Mb/s; 36 Mb/s; 48 Mb/s; 54 Mb/s'), 
		('Encryption key', 'on'), 
		('IE', ' IEEE 802.11i/WPA2 Version 1'), 
		('IE', ' WPA Version 1'), ('01 - Address', ' 60:38:E0:DB:B2:4E'), 
		('Authentication Suites (1) ', ' PSK'), 
		('Authentication Suites (1) ', ' PSK'), 
		('Pairwise Ciphers (1) ', ' CCMP'), 
		('Pairwise Ciphers (1) ', ' TKIP'), 
		('Channel', '6'), 
		('Group Cipher ', ' TKIP'), 
		('Group Cipher ', ' TKIP'), 
		('ESSID', 'Troy')
	]
)
"""

a = run(args=["sudo", "/sbin/iw", "wlan1", "link"], stdout=PIPE)
b = a.stdout.decode()
c = b.split("\n")
d = [a.split(":", 1) for a in c]
e = [a for a in d if len(a) > 1]
f = dict([(a[0].strip(), a[1].strip()) for a in e])
